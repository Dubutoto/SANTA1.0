<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.santa.outgoing.mapper.OutgoingMapper">

    <!-- OutgoingDetailsDTO에 대한 resultMap 정의 -->
    <resultMap id="OutgoingDetailsResult" type="com.example.santa.outgoing.vo.OutgoingDTO">
        <result column="outgoing_id" property="outgoingId"/>
        <result column="order_id" property="orderId"/>
        <result column="outgoing_date" property="outgoingDate"/>
        <result column="status" property="outgoingStatus"/>
        <result column="warehouseName" property="warehouseName"/>
        <result column="branchName" property="branchName"/>
        <result column="productCategory" property="productCategory"/>
        <result column="productName" property="productName"/>
        <result column="quantity" property="outgoingQuantity"/>
        <result column="price" property="productPrice"/>
        <result column="totalPrice" property="totalPrice"/>
    </resultMap>


    <insert id="insertTransitRecords">
        INSERT INTO Transit (outgoing_id, warehouse_id, branch_id, product_id, quantity, transit_date, status)
        SELECT
            o.outgoing_id,
            o.warehouse_id,
            o.branch_id,
            o.product_id,
            o.quantity,
            NOW(),
            '배송대기'
        FROM Outgoing o
        WHERE o.outgoing_id IN
        <foreach item="id" collection="outgoingIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </insert>


    <update id="updateOutgoingStatus" parameterType="com.example.santa.outgoing.vo.OutgoingDTO">
        UPDATE Outgoing
        SET status= '승인'
        WHERE outgoing_id IN
        <foreach item="id" collection="outgoingIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="updateOutgoingStatusRejection" parameterType="com.example.santa.outgoing.vo.OutgoingDTO">
        UPDATE Outgoing
        SET status= '거절'
        WHERE outgoing_id IN
        <foreach item="id" collection="outgoingIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--전체 출고 조회-->
    <select id="findAllOutgoing"

            resultMap="OutgoingDetailsResult">
        SELECT
            o.outgoing_id,
            o.order_id,
            o.outgoing_date,
            o.status,
            w.name AS warehouseName,
            b.name AS branchName,
            c.name AS productCategory,
            p.name AS productName,
            o.quantity,
            p.price,
            (o.quantity * p.price) AS totalPrice
        FROM
            outgoing o
                JOIN
            warehouses w ON o.warehouse_id = w.warehouse_id
                JOIN
            branches b ON o.branch_id = b.branch_id
                JOIN
            products p ON o.product_id = p.product_id
                JOIN
            categories c ON p.category_id = c.category_id
    </select>

<!--지점별 출고 조회-->
    <select id="findOutgoingByBranchName"
            resultMap="OutgoingDetailsResult">
        SELECT
            o.outgoing_id,
            o.order_id,
            o.outgoing_date AS outgoingDate,
            o.status,
            w.name AS warehouseName,
            b.name AS branchName,
            c.name AS categoryName,
            p.name AS productName,
            o.quantity,
            p.price,
            (o.quantity * p.price) AS totalPrice
        FROM
            outgoing o
                JOIN
            warehouses w ON o.warehouse_id = w.warehouse_id
                JOIN
            branches b ON o.branch_id = b.branch_id
                JOIN
            products p ON o.product_id = p.product_id
                JOIN
            categories c ON p.category_id = c.category_id
        WHERE
            b.name = #{branchName}
    </select>

<!--카테고리별 출고 조회-->
    <select id="findOutgoingByCategory"
            resultMap="OutgoingDetailsResult">
        SELECT
            o.outgoing_id,
            o.order_id,
            o.outgoing_date AS outgoingDate,
            o.status,
            w.name AS warehouseName,
            b.name AS branchName,
            c.name AS categoryName,
            p.name AS productName,
            o.quantity,
            p.price,
            (o.quantity * p.price) AS totalPrice
        FROM
            outgoing o
                JOIN
            warehouses w ON o.warehouse_id = w.warehouse_id
                JOIN
            branches b ON o.branch_id = b.branch_id
                JOIN
            products p ON o.product_id = p.product_id
                JOIN
            categories c ON p.category_id = c.category_id
        WHERE
            c.name = #{categoryName}
    </select>

<!--날짜별 출고 조회-->
    <select id="findOutgoingByDate"
            resultMap="OutgoingDetailsResult">
        SELECT
            o.outgoing_id, --출고ID
            o.order_id, --주문ID
            o.outgoing_date AS outgoingDate, --출고날짜
            o.status, --출고상태
            w.name AS warehouseName, --창고이름
            b.name AS branchName, --지점이름
            c.name AS categoryName, --카테고리명
            p.name AS productName, --상품이름
            o.quantity, --출고수량
            p.price, --상품가격
            (o.quantity * p.price) AS totalPrice --총가격
        FROM
            outgoing o
                JOIN
            warehouses w ON o.warehouse_id = w.warehouse_id
                JOIN
            branches b ON o.branch_id = b.branch_id
                JOIN
            products p ON o.product_id = p.product_id
                JOIN
            categories c ON p.category_id = c.category_id
        WHERE
            o.date BETWEEN :startDate AND :endDate;
    </select>
</mapper>